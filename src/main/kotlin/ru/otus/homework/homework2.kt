package ru.otus.homework

//## 1. Функция с обязательными и необязательными позиционными параметрами
//Напишите функцию, которая будет принимать:
//
//- два обязательных аргумента типа `Int`
//- неограниченное число дополнительных аргументов типа `Int`
//
//Функция должна возвращать сумму первого, второго и дополнительных аргументов.
//Если в функцию передано меньше двух аргументов, программа не должна собираться (ошибка компиляции).

fun main() {
    println(calculatehw(5, 7, 9, 4, 5))
    println(calculatehw(5, 7))

    println(join_stringhw("Я", "себя", "знаю"))
    println(join_stringhw("Я", "себя", "знаю", char = ','))

    println(time_fun(::sleep))
}

fun calculatehw(n1: Int, n2: Int, vararg n: Int): String {
    val sum = n1 + n2 + n.sum()

    return "$sum"
}

//## 2. Функция с необязательным параметром и позиционными параметрами
//Напишите функцию, которая будет принимать:
//
//- неограниченное количество строк `String`
//- необязательный параметр типа `Char`
//
//Функция должна возвращать объединение строк.
//
//- по умолчанию, строки объединяется пробелом
//- если передан `Char` параметр, то объединение делается этим символом

fun join_stringhw(vararg str: String, char: Char = ' '): String {
    val res = str.joinToString(separator = "$char")

    return res
}

//## 4. Функция, измеряющая время выполнения другой функции
//
//Напишите функцию, которая бы принимала другую функцию в качестве параметра.
//Ваша функция должна запустить функцию, переданную в аргументе, и вернуть время ее выполнения.
//
//Примечание: используйте что-то долгое (например, длинный цикл с печатью) в качестве тестовой функции. Иначе, вы можете
//не заметить, сколько времени прошло

fun time_fun(op: (Int) -> Unit): String {
    val start_time = System.currentTimeMillis()
    val sleep = op(99999)
    val end_time = System.currentTimeMillis() - start_time
    return "Время выполнения функции: $end_time ms"
}

fun sleep(n: Int) {
    for (i in 1..n)
        for (x in 1..n)
            continue
}